
Practical Malware Analysis - Book Notes


What is malware analysis?
	Dissecting malware to understand how it works, how to identify it, and how to defeat or eliminate it.

Goal of malware analysis:
	Determine exactly what a suspect binary can do, how to detect it on the network, and how to measure and contain its damage.

	- Host based signatures: Used to detect malware on hosts.
	- Network signatures: Used to detect malware by monitoring network traffic.

Malware analysis techniques
	- Basic static analysis: Examining the executable file without viewing the actual instructions.
	- Basic dynamic analysis: Running the malware and observing its behavior to remove the infection and/or produce effective signatures.
	- Advanced static analysis: Reverse engineering malware internals by loading the executable into a disassembler and looking at the program instructions.
	- Advanced dynamic analysis: Use a debugger to examine the internals of a running malicious executable.

Types of malware
	- Backdoor: Malicious code that allow attacker access to the system.
	- Botnet: Computers infected by malware that allows attacker to control system from a C2 server.
	- Downloader: Malicious code that downloads other malicious code. Usually used when attacker first gain access to the system(exploitation).
	- Information-stealing malware: Collects information of victim computer and sends it to attacker.
	- Launcher: Malicious program that launches other malicious program.
	- Rootkit: Malicious code designed to hide the conceal the exisitence of the attacker on the system.
	- Worm or virus: Malicious code that copy itself and infect addtional computers in the enviroment.


Basic Analysis
	- Using antivirus tools to confirm maliciousness.
	- Using hashes to identify malware.
	- Using information from a file strings, functions, and headers.
		- This is a simple way to way to get hints about the functionality of a program. For example, program accesses an URL.

	Packed and obfuscated malware
		- Obfuscated: Malware author tries to hide the execution of the program.
		- Packed: Malicious program that is compressed and cannot be analyzed.

		One way to detect packed is with the PEiD program.

	Linked libraries and functions
		- Static: Least common used method, althought it is common in UNIX programs. In statically linked libraries, all code from the library is copied into the executable making the executable program grow in size.
		- Runtime: Commonly used in malware specially when its packed or obfuscated. Executables connect to libraries only when that function is needed, not a program start.
		- Dynamic: Is the most common method. The host OS search for the necessary libraries when the program is loaded. When the program calls the library function, that function executes within the library. The PE file header stores information about every library that will be loaded.

	PE file headers and sections
		- .text: COntains the instructions that the CPU executes(program code).
		- .rdata: Contains import and export information.
		- .data: Contains program global data.
		- .rsrc: Contains the resources used by the executable that are not considered part of the executable.


Basic Dynamic Analysis
	Malware sandbox: Free malware sandboxes like Joe Sandbox provide a quick and easy way to analyze malware. The drawbacks of this free sandboxes are that they have a time limitation and that they dont record things like keylogging, etc.

	Run malware
		- To launch DLL's in Windows use rundll32.exe: C:\rundll32.exe [DLLname], [Export arguments]. For example, C:\rundll32.exe rip.dll, Install
		- Double click to launch .exe programs.

	Monitoring
		- Process monitor(procmon): Monitor certain registry, file system, network, process, and thread activity.
		- Process explorer: Powerful Microsoft tool to monitor processes running.	
	
	Check for registry changes:
		- Regshot: An open source registry comparison tool that allows you to take and compare two registry snapshots.
			- Take first shot.
			- Run malware.
			- Take second shot.
			- Click Compare button.

	Faking a network
		Create a fake network to allow the malware to communicate with IOCs.
		
		- ApateDNS: A free tool from mandiant. Spoofs DNS responses to a user-specified IP address by listening on UDP port 53 on the local machine.
		- Netcat: It can act as a server, and a client.

		For example, ApateDNS redirects the DNS request for evil.malware3.com to our localhost. A netcat listener on port 80 captures the packet coming from the malware. Now that we capture the packet we can analyze it. Vouila!

		- INetSim: Is a free linux software suit for simulating Internet services.
			- Install it on a linux VM on the same LAN that the Window VM.

 


	
	
