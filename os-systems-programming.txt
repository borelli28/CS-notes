CS162: Operating Systems and Systems Programming - UC Berkley, John Kubiatowicz


// Lecture 1 - Intro
Operating systems
	- Provide consistent abstractions to applications
	- Manage sharing of resources among multiple applications

	Building blocks:
		- Processes
		- Threads, Concurrency, Scheduling, Coordination
		- Address spaces
		- Protection, isolation, sharing, security
		- Communication, protocols
		- Persistent storage, transactions, consistency, resilience
		- Interfaces to all devices

	OS Basics:
		- Hardware:
			1) Processor
			2) Memory
			3) Storage
			4) Networks
		- OS:
			1) Threads
			2) Address spaces
			3) Files
			4) Sockets
		- Process: Execution environment wit restricted rights provided by the OS
		- Compiled program
			- System libraries

// Lecture 2
The OS abstracts underlying hardware to help tame complexity
	- Processor -> thread
	- Memory -> address space
	- Disks, SSDs -> files
	- Networks -> sockets
	- Machines -> processes

Four fundamental OS concepts
	- Thread: Execution context
		- Fully describes program state
		- Program counter, registers, execution flags, stack
	- Address space
		- Set of memory addresses accessible to program(for read/write)
		- May be distinct from memory space of the physical machine
	- Process: An instance of a running program
		- Protected address space
	- Dual mode operation/protection
		- Kernel mode, and user mode
		- Only the "system" has the ability to access certain resources
		- Combined with translation, isolates programs from each other and the OS from programs

Thread Control Block(TCB): Holds contents of registers when thread is not running. Use on multithreaded processes, during context switch

// Lecture 3 - Abstractions: Threads and Processes







